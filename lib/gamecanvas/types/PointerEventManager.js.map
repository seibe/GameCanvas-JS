{"version":3,"sources":["../../../src/gamecanvas/types/PointerEventManager.js"],"names":["Pointer","PointerEventManager","_updateMouse","e","_mouseX","offsetX","_scale","_mouseY","offsetY","type","_mouseDownFrame","_frameCount","onEnterFrame","frameCount","elapsedTime","_eventQueue","length","shift","_pointerMap","set","pointerId","pointerType","get","leaveFlag","updatePosition","onLeaveFrame","size","p","values","delete","id","mouseX","mouseY","mouseClickLength","isMousePushed","isMouseReleased","isMousePress","scale","val","checkHitRect","x","y","w","h","stateFilter","r","b","state","checkHitCircle","radius","sqrRad","sqrMag","constructor","surface","undefined","Array","Map","callback","push","addEventListener","trace","from","map","join"],"mappings":"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","sourcesContent":["\r\nimport Pointer from \"./Pointer.js\";\r\n\r\nexport default class PointerEventManager {\r\n    _eventQueue = undefined;\r\n    _pointerMap = undefined;\r\n    _scale = 1;\r\n    _frameCount = 0;\r\n    _mouseX = 0;\r\n    _mouseY = 0;\r\n    _mouseDownFrame = 0;\r\n\r\n    _updateMouse(e) {\r\n        this._mouseX = e.offsetX * this._scale;\r\n        this._mouseY = e.offsetY * this._scale;\r\n\r\n        switch (e.type) {\r\n            case \"pointerdown\":\r\n                this._mouseDownFrame = this._frameCount;\r\n                break;\r\n\r\n            case \"pointerup\":\r\n                this._mouseDownFrame = -1;\r\n                break;\r\n        }\r\n    }\r\n\r\n    onEnterFrame(frameCount, elapsedTime) {\r\n        this._frameCount = frameCount;\r\n\r\n        while (this._eventQueue.length > 0) {\r\n            const e = this._eventQueue.shift();\r\n            switch (e.type) {\r\n                case \"pointerover\":\r\n                    this._pointerMap.set(e.pointerId, new Pointer(e.pointerId, e.pointerType, elapsedTime, frameCount, e.offsetX * this._scale, e.offsetY * this._scale));\r\n                    break;\r\n\r\n                case \"pointerleave\":\r\n                    this._pointerMap.get(e.pointerId).leaveFlag = true;\r\n                    break;\r\n\r\n                default:\r\n                    this._pointerMap.get(e.pointerId).updatePosition(e.offsetX * this._scale, e.offsetY * this._scale, e.type);\r\n                    if (e.pointerType === \"mouse\") this._updateMouse(e);\r\n                    break;\r\n            }\r\n        }\r\n    }\r\n    onLeaveFrame() {\r\n        if (this._pointerMap.size > 0) {\r\n            for (const p of this._pointerMap.values()) {\r\n                if (p.leaveFlag) this._pointerMap.delete(p.id);\r\n            }\r\n        }\r\n        if (this._mouseDownFrame === -1) {\r\n            this._mouseDownFrame = 0;\r\n        }\r\n        this._frameCount++;\r\n    }\r\n\r\n    get mouseX() { return this._mouseX; }\r\n    get mouseY() { return this._mouseY; }\r\n    get mouseClickLength() { return (this._mouseDownFrame > 0) ? (this._frameCount - this._mouseDownFrame + 1) : this._mouseDownFrame; }\r\n    get isMousePushed() { return (this._mouseDownFrame === this._frameCount); }\r\n    get isMouseReleased() { return (this._mouseDownFrame === -1); }\r\n    get isMousePress() { return (this._mouseDownFrame > 0); }\r\n\r\n    set scale(val) {\r\n        this._scale = val;\r\n    }\r\n\r\n    checkHitRect(x, y, w, h, stateFilter = null) {\r\n        const r = x + w;\r\n        const b = y + h;\r\n        for (const p of this._pointerMap.values()) {\r\n            if (stateFilter === null || p.state === stateFilter) {\r\n                if (x <= p.x && y <= p.y && p.x <= r && p.y <= b) return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    checkHitCircle(x, y, radius, stateFilter = null) {\r\n        const sqrRad = radius * radius;\r\n        for (const p of this._pointerMap.values()) {\r\n            if (stateFilter === null || p.state === stateFilter) {\r\n                const sqrMag = (p.x - x) * (p.x - x) + (p.y - y) * (p.y - y);\r\n                if ((sqrMag - sqrRad) >= 0) return true;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    constructor(surface) {\r\n        this._eventQueue = new Array();\r\n        this._pointerMap = new Map();\r\n\r\n        const callback = e => { this._eventQueue.push(e); };\r\n        surface.addEventListener(\"pointerover\", callback, false);\r\n        surface.addEventListener(\"pointerdown\", callback, false);\r\n        surface.addEventListener(\"pointermove\", callback, false);\r\n        surface.addEventListener(\"pointerup\", callback, false);\r\n        surface.addEventListener(\"pointercancel\", callback, false);\r\n        surface.addEventListener(\"pointerleave\", callback, false);\r\n    }\r\n\r\n    trace() {\r\n        if (this._pointerMap.size > 0) {\r\n            return \"Pointer: \" + Array.from(this._pointerMap.values()).map(p => `${p.id} => ${p.state} { ${p.x}, ${p.y} }`).join(\", \");\r\n        }\r\n        return \"Pointer: none\";\r\n    }\r\n}\r\n"],"file":"PointerEventManager.js"}